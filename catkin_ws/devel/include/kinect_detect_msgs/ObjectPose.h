// Generated by gencpp from file kinect_detect_msgs/ObjectPose.msg
// DO NOT EDIT!


#ifndef KINECT_DETECT_MSGS_MESSAGE_OBJECTPOSE_H
#define KINECT_DETECT_MSGS_MESSAGE_OBJECTPOSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kinect_detect_msgs
{
template <class ContainerAllocator>
struct ObjectPose_
{
  typedef ObjectPose_<ContainerAllocator> Type;

  ObjectPose_()
    : class_id(0)
    , confidence(0.0)
    , rect()
    , center()
    , quaternation()  {
      rect.assign(0);

      center.assign(0.0);

      quaternation.assign(0.0);
  }
  ObjectPose_(const ContainerAllocator& _alloc)
    : class_id(0)
    , confidence(0.0)
    , rect()
    , center()
    , quaternation()  {
  (void)_alloc;
      rect.assign(0);

      center.assign(0.0);

      quaternation.assign(0.0);
  }



   typedef uint8_t _class_id_type;
  _class_id_type class_id;

   typedef double _confidence_type;
  _confidence_type confidence;

   typedef boost::array<uint32_t, 4>  _rect_type;
  _rect_type rect;

   typedef boost::array<double, 3>  _center_type;
  _center_type center;

   typedef boost::array<double, 4>  _quaternation_type;
  _quaternation_type quaternation;




  typedef boost::shared_ptr< ::kinect_detect_msgs::ObjectPose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kinect_detect_msgs::ObjectPose_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectPose_

typedef ::kinect_detect_msgs::ObjectPose_<std::allocator<void> > ObjectPose;

typedef boost::shared_ptr< ::kinect_detect_msgs::ObjectPose > ObjectPosePtr;
typedef boost::shared_ptr< ::kinect_detect_msgs::ObjectPose const> ObjectPoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kinect_detect_msgs::ObjectPose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kinect_detect_msgs::ObjectPose_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace kinect_detect_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'kinect_detect_msgs': ['/home/robot/catkin_ws/src/kinect_detect_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::kinect_detect_msgs::ObjectPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kinect_detect_msgs::ObjectPose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kinect_detect_msgs::ObjectPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kinect_detect_msgs::ObjectPose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kinect_detect_msgs::ObjectPose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kinect_detect_msgs::ObjectPose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kinect_detect_msgs::ObjectPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e68ffe39821162630486382c2d079836";
  }

  static const char* value(const ::kinect_detect_msgs::ObjectPose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe68ffe3982116263ULL;
  static const uint64_t static_value2 = 0x0486382c2d079836ULL;
};

template<class ContainerAllocator>
struct DataType< ::kinect_detect_msgs::ObjectPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kinect_detect_msgs/ObjectPose";
  }

  static const char* value(const ::kinect_detect_msgs::ObjectPose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kinect_detect_msgs::ObjectPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 class_id\n\
float64 confidence\n\
uint32[4] rect\n\
float64[3] center\n\
float64[4] quaternation\n\
";
  }

  static const char* value(const ::kinect_detect_msgs::ObjectPose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kinect_detect_msgs::ObjectPose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.class_id);
      stream.next(m.confidence);
      stream.next(m.rect);
      stream.next(m.center);
      stream.next(m.quaternation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectPose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kinect_detect_msgs::ObjectPose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kinect_detect_msgs::ObjectPose_<ContainerAllocator>& v)
  {
    s << indent << "class_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.class_id);
    s << indent << "confidence: ";
    Printer<double>::stream(s, indent + "  ", v.confidence);
    s << indent << "rect[]" << std::endl;
    for (size_t i = 0; i < v.rect.size(); ++i)
    {
      s << indent << "  rect[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.rect[i]);
    }
    s << indent << "center[]" << std::endl;
    for (size_t i = 0; i < v.center.size(); ++i)
    {
      s << indent << "  center[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.center[i]);
    }
    s << indent << "quaternation[]" << std::endl;
    for (size_t i = 0; i < v.quaternation.size(); ++i)
    {
      s << indent << "  quaternation[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.quaternation[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KINECT_DETECT_MSGS_MESSAGE_OBJECTPOSE_H
