# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kinect_detect_msgs/ObjectPose.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ObjectPose(genpy.Message):
  _md5sum = "e68ffe39821162630486382c2d079836"
  _type = "kinect_detect_msgs/ObjectPose"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 class_id
float64 confidence
uint32[4] rect
float64[3] center
float64[4] quaternation
"""
  __slots__ = ['class_id','confidence','rect','center','quaternation']
  _slot_types = ['uint8','float64','uint32[4]','float64[3]','float64[4]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       class_id,confidence,rect,center,quaternation

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObjectPose, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.class_id is None:
        self.class_id = 0
      if self.confidence is None:
        self.confidence = 0.
      if self.rect is None:
        self.rect = [0,0,0,0]
      if self.center is None:
        self.center = [0.,0.,0.]
      if self.quaternation is None:
        self.quaternation = [0.,0.,0.,0.]
    else:
      self.class_id = 0
      self.confidence = 0.
      self.rect = [0,0,0,0]
      self.center = [0.,0.,0.]
      self.quaternation = [0.,0.,0.,0.]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_Bd.pack(_x.class_id, _x.confidence))
      buff.write(_struct_4I.pack(*self.rect))
      buff.write(_struct_3d.pack(*self.center))
      buff.write(_struct_4d.pack(*self.quaternation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.class_id, _x.confidence,) = _struct_Bd.unpack(str[start:end])
      start = end
      end += 16
      self.rect = _struct_4I.unpack(str[start:end])
      start = end
      end += 24
      self.center = _struct_3d.unpack(str[start:end])
      start = end
      end += 32
      self.quaternation = _struct_4d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_Bd.pack(_x.class_id, _x.confidence))
      buff.write(self.rect.tostring())
      buff.write(self.center.tostring())
      buff.write(self.quaternation.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.class_id, _x.confidence,) = _struct_Bd.unpack(str[start:end])
      start = end
      end += 16
      self.rect = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=4)
      start = end
      end += 24
      self.center = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 32
      self.quaternation = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_Bd = struct.Struct("<Bd")
_struct_4d = struct.Struct("<4d")
_struct_3d = struct.Struct("<3d")
_struct_4I = struct.Struct("<4I")
