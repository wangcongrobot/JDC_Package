# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kinect_detect_msgs/ObjectPoses.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import kinect_detect_msgs.msg

class ObjectPoses(genpy.Message):
  _md5sum = "dea7b0d2a30c999d7206bf1518da1588"
  _type = "kinect_detect_msgs/ObjectPoses"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """ObjectPose[] object_poses

================================================================================
MSG: kinect_detect_msgs/ObjectPose
uint8 class_id
float64 confidence
uint32[4] rect
float64[3] center
float64[4] quaternation
"""
  __slots__ = ['object_poses']
  _slot_types = ['kinect_detect_msgs/ObjectPose[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       object_poses

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObjectPoses, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.object_poses is None:
        self.object_poses = []
    else:
      self.object_poses = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.object_poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.object_poses:
        _x = val1
        buff.write(_struct_Bd.pack(_x.class_id, _x.confidence))
        buff.write(_struct_4I.pack(*val1.rect))
        buff.write(_struct_3d.pack(*val1.center))
        buff.write(_struct_4d.pack(*val1.quaternation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.object_poses is None:
        self.object_poses = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.object_poses = []
      for i in range(0, length):
        val1 = kinect_detect_msgs.msg.ObjectPose()
        _x = val1
        start = end
        end += 9
        (_x.class_id, _x.confidence,) = _struct_Bd.unpack(str[start:end])
        start = end
        end += 16
        val1.rect = _struct_4I.unpack(str[start:end])
        start = end
        end += 24
        val1.center = _struct_3d.unpack(str[start:end])
        start = end
        end += 32
        val1.quaternation = _struct_4d.unpack(str[start:end])
        self.object_poses.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.object_poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.object_poses:
        _x = val1
        buff.write(_struct_Bd.pack(_x.class_id, _x.confidence))
        buff.write(val1.rect.tostring())
        buff.write(val1.center.tostring())
        buff.write(val1.quaternation.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.object_poses is None:
        self.object_poses = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.object_poses = []
      for i in range(0, length):
        val1 = kinect_detect_msgs.msg.ObjectPose()
        _x = val1
        start = end
        end += 9
        (_x.class_id, _x.confidence,) = _struct_Bd.unpack(str[start:end])
        start = end
        end += 16
        val1.rect = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=4)
        start = end
        end += 24
        val1.center = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
        start = end
        end += 32
        val1.quaternation = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
        self.object_poses.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_Bd = struct.Struct("<Bd")
_struct_4d = struct.Struct("<4d")
_struct_3d = struct.Struct("<3d")
_struct_4I = struct.Struct("<4I")
